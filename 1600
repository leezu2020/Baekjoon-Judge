import java.util.*;

class pos{
	int x, y, depth, rest;
	
	public pos(int x, int y, int depth, int rest) {
		this.x = x;
		this.y = y;
		this.depth = depth;
		this.rest = rest;
	}
}

public class Main {
	
	public static int K,W,H;
	public static int[][][] checked;
	public static int[][] grid;
	public static int[] dx = {1,0,-1,0, -2,-1,1,2,-2,-1,1,2};
	public static int[] dy = {0,1,0,-1, 1,2,2,1,-1,-2,-2,-1};
    public static void main(String[] args) {
    
    	Scanner sc = new Scanner(System.in);
    	K = sc.nextInt();
    	W = sc.nextInt();
    	H = sc.nextInt();
    	sc.nextLine();
    	
    	checked = new int[H][W][K+1];
    	grid = new int[H][W];
    	
    	for(int i=0; i<H; i++) {
    		for(int j=0; j<W; j++) {
    			grid[i][j] = sc.nextInt();
    		}
    	}
    	
    	System.out.println(dfs());
    	
    	sc.close();
    }
	
    public static int dfs() {
    	int cnt=-1;
    	Queue <pos> q = new LinkedList<pos>();
    	
    	q.add(new pos(0,0,0,0));
    	checked[0][0][0] = 1;
    	
    	while(!q.isEmpty()) {
    		pos now = q.poll();
    		
    		if(now.x == H-1 && now.y == W-1) {
    			cnt = now.depth;
    			break;
    		}
    		
    		if(now.rest<K) {
	    		for(int i=0; i<12; i++) {
	    			
	    			int ax = now.x + dx[i];
	    			int ay = now.y + dy[i];
	    			
	    			if(ax>=0 && ay>=0 && ax<H && ay<W) {
	    				if(i>=4) {
	    					if(grid[ax][ay]==0 && checked[ax][ay][now.rest+1]==0) {
	    						checked[ax][ay][now.rest+1] = 1;
	    						q.add(new pos(ax,ay,now.depth+1,now.rest+1));
	    					}
	    				}else {
	    					if(grid[ax][ay]==0 && checked[ax][ay][now.rest]==0) {
	    						checked[ax][ay][now.rest] = 1;
	    						q.add(new pos(ax,ay,now.depth+1,now.rest));
	    					}
	    				}
	    			}
	    		}
    		}
    		else {
    			for(int i=0; i<4; i++) {
	    			int ax = now.x + dx[i];
	    			int ay = now.y + dy[i];
	    			
	    			if(ax>=0 && ay>=0 && ax<H && ay<W) {
		    			if(checked[ax][ay][now.rest]==0 && grid[ax][ay]==0) {
		    				checked[ax][ay][now.rest] = 1;
		    				q.add(new pos(ax,ay,now.depth+1,now.rest));
		    			}
	    			}
	    		}
    		}
    		
    	}
    	
    	
    	return cnt;
    }
    
    
}

    
  
