import java.util.*;
 
class pos{
	int x,y,depth, op;
	
	pos(int x, int y, int depth, int op) {
		this.x = x;
		this.y = y;
		this.depth = depth;
		this.op = op;
	}
	public String toString() {
		return this.x+" "+this.y+" "+this.depth;
	}
}

public class Main {
	
	public static int N,M;
	public static int[][] grid;
	public static int[][][] checked;
	public static int[] dx = {0,1,0,-1};
	public static int[] dy = {1,0,-1,0};
	public static int shortcut = Integer.MAX_VALUE;	// 최단 경로
	public static int cnt = 0;
	
    public static void main(String[] args) {
    
    	Scanner sc = new Scanner(System.in);
    	
    	N = sc.nextInt();
    	M = sc.nextInt();
    	sc.nextLine();
    	
    	checked = new int[N][M][2];
    	grid = new int[N][M];
    	String temp = null;
    	
    	for(int i=0; i<N; i++) {
    		temp = sc.nextLine();
    		for(int j=0; j<M; j++) {
    			grid[i][j] = temp.charAt(j) - '0';
    		}
    	}
    	
    	
    	
    	System.out.println(bfs(0,0));
    	
    	sc.close();
    }
		

    public static int bfs(int x, int y) {
    	Queue <pos> q = new LinkedList<pos>();
    	
    	q.add(new pos(0,0,1,0));
    	checked[0][0][0] = 1;
    	
    	while(!q.isEmpty()) {
    		pos now = q.poll();
    		
    		if(now.x == N-1 && now.y == M-1) {
	    			shortcut = Math.min(shortcut, now.depth);
	    			continue;
	    	}
	    		
    		for(int i=0; i<4; i++) {
	    		int ax = now.x + dx[i];
	    		int ay = now.y + dy[i];
	    		int ad = now.depth + 1;
	    		int aop = now.op;
	    		
	    		if(ax<0||ay<0||ax>=N||ay>=M) continue;
	    		
	    		
	    		
	    		
	    		// 벽 만났을때
	    		if(grid[ax][ay] == 1) {
	    			// 벽 부수기
	    			if(aop == 0 && checked[ax][ay][1]==0) {
	    				//체크
//	    				System.out.println(ax+" "+ay+"에서 벽 부수기 이동 거리: "+ad);
	    				
	    				checked[ax][ay][1] = 1;
	    				q.add(new pos(ax,ay,ad,1));
	    			}
	    		}
	    		else{
	    			//체크
	    			if(checked[ax][ay][aop]==0) {
//		    			System.out.println(ax+" "+ay+"에서 이동중 이동 거리: "+ad);
		    			checked[ax][ay][aop] = 1;
		    			q.add(new pos(ax,ay,ad,aop));
	    			}
	    		}
    		}
    		
    	}
    	if(shortcut == Integer.MAX_VALUE)
    		return -1;
    	else
    		return shortcut;
    }
    
}

    
    
    	
    
  
